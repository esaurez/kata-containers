/*
Cloud Hypervisor API

Local HTTP based API for managing and inspecting a cloud-hypervisor virtual machine.

API version: 0.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NimbleNetConfig struct for NimbleNetConfig
type NimbleNetConfig struct {
	Size *int32 `json:"size,omitempty"`
	Iommu *bool `json:"iommu,omitempty"`
	NumQueues *int32 `json:"num_queues,omitempty"`
	QueueSize *int32 `json:"queue_size,omitempty"`
	VhostSocket string `json:"vhost_socket"`
	VhostMode *string `json:"vhost_mode,omitempty"`
	Id *string `json:"id,omitempty"`
	PciSegment *int32 `json:"pci_segment,omitempty"`
}

// NewNimbleNetConfig instantiates a new NimbleNetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNimbleNetConfig(vhostSocket string) *NimbleNetConfig {
	this := NimbleNetConfig{}
	var iommu bool = false
	this.Iommu = &iommu
	var numQueues int32 = 1
	this.NumQueues = &numQueues
	var queueSize int32 = 2
	this.QueueSize = &queueSize
	this.VhostSocket = vhostSocket
	var vhostMode string = "Client"
	this.VhostMode = &vhostMode
	return &this
}

// NewNimbleNetConfigWithDefaults instantiates a new NimbleNetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNimbleNetConfigWithDefaults() *NimbleNetConfig {
	this := NimbleNetConfig{}
	var iommu bool = false
	this.Iommu = &iommu
	var numQueues int32 = 1
	this.NumQueues = &numQueues
	var queueSize int32 = 2
	this.QueueSize = &queueSize
	var vhostMode string = "Client"
	this.VhostMode = &vhostMode
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *NimbleNetConfig) SetSize(v int32) {
	o.Size = &v
}

// GetIommu returns the Iommu field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetIommu() bool {
	if o == nil || o.Iommu == nil {
		var ret bool
		return ret
	}
	return *o.Iommu
}

// GetIommuOk returns a tuple with the Iommu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetIommuOk() (*bool, bool) {
	if o == nil || o.Iommu == nil {
		return nil, false
	}
	return o.Iommu, true
}

// HasIommu returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasIommu() bool {
	if o != nil && o.Iommu != nil {
		return true
	}

	return false
}

// SetIommu gets a reference to the given bool and assigns it to the Iommu field.
func (o *NimbleNetConfig) SetIommu(v bool) {
	o.Iommu = &v
}

// GetNumQueues returns the NumQueues field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetNumQueues() int32 {
	if o == nil || o.NumQueues != nil {
		var ret int32
		return ret
	}
	return *o.NumQueues
}

// GetNumQueuesOk returns a tuple with the NumQueues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetNumQueuesOk() (*int32, bool) {
	if o == nil || o.NumQueues != nil {
		return nil, false
	}
	return o.NumQueues, true
}

// HasNumQueues returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasNumQueues() bool {
	if o != nil && o.NumQueues != nil {
		return true
	}

	return false
}

// SetNumQueues gets a reference to the given int32 and assigns it to the NumQueues field.
func (o *NimbleNetConfig) SetNumQueues(v int32) {
	o.NumQueues = &v
}

// GetQueueSize returns the QueueSize field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetQueueSize() int32 {
	if o == nil || o.QueueSize != nil {
		var ret int32
		return ret
	}
	return *o.QueueSize
}

// GetQueueSizeOk returns a tuple with the QueueSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetQueueSizeOk() (*int32, bool) {
	if o == nil || o.QueueSize == nil {
		return nil, false
	}
	return o.QueueSize, true
}

// HasQueueSize returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasQueueSize() bool {
	if o != nil && o.QueueSize != nil {
		return true
	}

	return false
}

// SetQueueSize gets a reference to the given int32 and assigns it to the QueueSize field.
func (o *NimbleNetConfig) SetQueueSize(v int32) {
	o.QueueSize = &v
}

// GetVhostSocket returns the VhostSocket field value
func (o *NimbleNetConfig) GetVhostSocket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VhostSocket
}

// GetVhostSocketOk returns a tuple with the VhostSocket field value
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetVhostSocketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VhostSocket, true
}

// SetVhostSocket sets field value
func (o *NimbleNetConfig) SetVhostSocket(v string) {
	o.VhostSocket = v
}

// GetVhostMode returns the VhostMode field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetVhostMode() string {
	if o == nil || o.VhostMode == nil {
		var ret string
		return ret
	}
	return *o.VhostMode
}

// GetVhostModeOk returns a tuple with the VhostMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetVhostModeOk() (*string, bool) {
	if o == nil || o.VhostMode == nil {
		return nil, false
	}
	return o.VhostMode, true
}

// HasVhostMode returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasVhostMode() bool {
	if o != nil && o.VhostMode != nil {
		return true
	}

	return false
}

// SetVhostMode gets a reference to the given string and assigns it to the VhostMode field.
func (o *NimbleNetConfig) SetVhostMode(v string) {
	o.VhostMode = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NimbleNetConfig) SetId(v string) {
	o.Id = &v
}

// GetPciSegment returns the PciSegment field value if set, zero value otherwise.
func (o *NimbleNetConfig) GetPciSegment() int32 {
	if o == nil || o.PciSegment == nil{
		var ret int32
		return ret
	}
	return *o.PciSegment
}

// GetPciSegmentOk returns a tuple with the PciSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleNetConfig) GetPciSegmentOk() (*int32, bool) {
	if o == nil || o.PciSegment == nil {
		return nil, false
	}
	return o.PciSegment, true
}

// HasPciSegment returns a boolean if a field has been set.
func (o *NimbleNetConfig) HasPciSegment() bool {
	if o != nil && o.PciSegment != nil {
		return true
	}

	return false
}

// SetPciSegment gets a reference to the given int32 and assigns it to the PciSegment field.
func (o *NimbleNetConfig) SetPciSegment(v int32) {
	o.PciSegment = &v
}

func (o NimbleNetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NimbleNetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Iommu != nil {
		toSerialize["iommu"] = o.Iommu
	}
	if o.NumQueues != nil {
		toSerialize["num_queues"] = o.NumQueues
	}
	if o.QueueSize != nil {
		toSerialize["queue_size"] = o.QueueSize
	}
	toSerialize["vhost_socket"] = o.VhostSocket
	if o.VhostMode != nil {
		toSerialize["vhost_mode"] = o.VhostMode
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PciSegment != nil {
		toSerialize["pci_segment"] = o.PciSegment
	}
	return toSerialize, nil
}

type NullableNimbleNetConfig struct {
	value *NimbleNetConfig
	isSet bool
}

func (v NullableNimbleNetConfig) Get() *NimbleNetConfig {
	return v.value
}

func (v *NullableNimbleNetConfig) Set(val *NimbleNetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNimbleNetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNimbleNetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNimbleNetConfig(val *NimbleNetConfig) *NullableNimbleNetConfig {
	return &NullableNimbleNetConfig{value: val, isSet: true}
}

func (v NullableNimbleNetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNimbleNetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

